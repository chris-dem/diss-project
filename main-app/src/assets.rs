use bevy::prelude::*;
use bevy_prototype_lyon::{
	entity::Shape,
	prelude::{ShapeBuilder, ShapeBuilderBase},
	shapes,
};
use itertools::Itertools;

use crate::constants::LINE_STROKE;

type OptionalPath<T> = [Option<T>; 3];

type StringPaths = OptionalPath<&'static str>;
type AffinePaths = OptionalPath<[f32; 6]>;

const BOT_TRANS: AffinePaths = [
	Some([0.29606938, 0., 0., 0.29606938, 10.973241, 0.22797343]),
	Some([0.29606938, 0., 0., 0.29606938, 0.26448864, 23.978561]),
	None,
];
const BOT_PATHS: StringPaths = [
	Some(
		"m 0.78,-0.01 q 0,0 0.01,1.12 0.01,1.13 0.01,2.56 0,1.44 -0.01,3.09 0,1.66 0.01,3.46 0.01,1.81 0.07,3.77 0.06,1.96 0.15,4.1 0.09,2.13 0.16,4.4 0.07,2.28 0.14,4.64 0.07,2.36 0.17,4.65 0.1,2.29 0.18,4.31 0.08,2.02 0.13,4.06 0.05,2.04 0.07,3.6 0.02,1.56 0.03,2.95 0.01,1.38 0.02,2.72 0,1.34 0,2.59 0,1.24 0.02,2.32 0.01,1.08 0.06,1.95 0.04,0.87 0.09,1.6 0.05,0.72 0.09,1.38 0.03,0.66 0.06,1.32 0.03,0.67 0.06,1.3 0.02,0.64 0.08,1.71 0.06,1.08 0.06,1.61 0,0.54 -0.09,1.17 -0.09,0.62 -0.17,1.2 -0.09,0.57 -0.13,1.11 -0.04,0.53 -0.05,1.09 -0.01,0.55 -0.01,1.11 0,0.56 -0.01,1.11 -0.01,0.55 -0.04,1.45 -0.02,0.9 0,1.66 0.02,0.76 0.09,1.48 0.07,0.73 0.19,2.72 0.12,2 -0.03,2.18 Q 2.03,81.67 1.82,81.8 1.62,81.93 1.38,81.99 1.14,82.05 0.89,82.03 0.65,82 0.43,81.9 0.2,81.8 0.02,81.64 -0.15,81.47 -0.27,81.26 -0.39,81.04 -0.43,80.8 q -0.05,-0.24 -0.01,-0.48 0.04,-0.25 0.15,-0.46 0.11,-0.22 0.28,-0.4 0.17,-0.17 0.39,-0.27 0.22,-0.11 0.46,-0.14 0.25,-0.03 0.49,0.02 0.24,0.05 0.45,0.17 0.21,0.12 0.38,0.31 0.16,0.18 0.25,0.41 0.1,0.22 0.12,0.47 0.01,0.24 -0.05,0.48 -0.06,0.24 -0.2,0.44 -0.13,0.21 -0.32,0.36 -0.2,0.15 -0.43,0.24 Q 1.3,82.03 1.06,82.03 0.81,82.04 0.58,81.96 0.34,81.89 0.14,81.74 -0.04,81.6 -0.18,81.4 -0.33,81.19 -0.4,80.96 q -0.06,-0.24 -0.06,-0.48 0.01,-0.25 0.1,-0.48 0.09,-0.23 0.09,-0.23 0,0 -0.35,-1.5 -0.36,-1.5 -0.35,-2.35 0.02,-0.84 0.07,-1.72 0.05,-0.87 0.13,-1.84 0.07,-0.97 0.09,-1.56 0.02,-0.59 0.06,-1.21 0.03,-0.63 0.1,-1.25 0.08,-0.63 0.19,-1.21 0.11,-0.58 0.27,-1.52 0.15,-0.95 0.21,-2.02 0.06,-1.08 0.1,-1.72 0.03,-0.64 0.07,-1.32 0.04,-0.67 0.1,-1.31 Q 0.48,58.61 0.53,57.88 0.57,57.16 0.6,56.29 0.64,55.43 0.62,54.34 0.61,53.25 0.61,52.01 0.6,50.76 0.6,49.43 0.6,48.09 0.59,46.71 0.58,45.33 0.55,43.78 0.53,42.22 0.48,40.19 0.43,38.17 0.35,36.15 0.26,34.13 0.16,31.83 0.05,29.53 -0.01,27.17 -0.08,24.81 -0.15,22.55 -0.23,20.28 -0.33,18.14 -0.43,16 -0.5,14.02 -0.56,12.04 -0.59,10.23 -0.61,8.43 -0.62,6.77 -0.64,5.12 -0.66,3.7 -0.69,2.28 -0.73,1.15 -0.78,0.01 -0.77,-0.07 q 0.01,-0.09 0.04,-0.18 0.03,-0.09 0.09,-0.17 0.05,-0.08 0.12,-0.14 0.07,-0.07 0.15,-0.11 0.08,-0.05 0.17,-0.07 0.09,-0.03 0.19,-0.03 0.08,0 0.17,0.02 0.09,0.02 0.18,0.06 0.08,0.04 0.15,0.1 0.08,0.06 0.13,0.14 0.06,0.08 0.09,0.16 0.04,0.09 0.05,0.18 0.02,0.1 0.02,0.1 z",
	),
	Some(
		"m 0.07,-0.89 q 0,0 0.95,0.09 0.95,0.09 1.98,0.17 1.03,0.07 7.45,0.23 6.42,0.16 10.09,0.26 3.67,0.1 6.47,0.15 2.8,0.07 4.68,0.11 1.89,0.05 3.19,0.1 1.3,0.05 2.19,0.06 0.88,0.01 1.48,0.01 0.6,-0.01 1.22,0 0.62,0.01 1.46,0.04 0.85,0.02 1.95,0.04 1.11,0.03 1.78,0.05 0.67,0.02 1.37,0.04 0.69,0.01 1.63,0.07 0.94,0.07 1.66,0.07 0.72,0 1.31,-0.01 0.59,-0.02 1.44,-0.06 0.85,-0.04 1.52,-0.04 0.68,-0.01 1.22,-0.04 0.55,-0.04 1.44,-0.05 0.88,-0.01 1.43,0.01 0.54,0.01 1.08,0.02 0.54,0.01 1.12,0.01 0.58,0.01 1.23,0.04 0.64,0.02 1.27,0.04 0.62,0.01 1.23,0.02 0.6,0.01 1.22,0.01 0.61,0.01 1.22,0.01 0.61,0.01 1.18,0.01 0.57,0 1.11,-0.01 0.54,0 1.64,-0.01 1.09,0 3,-0.2 1.91,-0.2 2.15,-0.25 0.23,-0.05 0.47,-0.02 0.23,0.03 0.45,0.13 0.21,0.1 0.39,0.27 0.17,0.16 0.28,0.37 0.11,0.22 0.14,0.45 0.04,0.24 0,0.47 -0.04,0.24 -0.15,0.45 -0.12,0.21 -0.29,0.37 -0.18,0.16 -0.39,0.26 -0.22,0.1 -0.46,0.12 Q 75.63,2.99 75.4,2.94 75.17,2.89 74.97,2.76 74.76,2.64 74.61,2.46 74.46,2.27 74.37,2.05 74.29,1.83 74.27,1.59 74.26,1.35 74.33,1.12 74.4,0.89 74.53,0.7 74.67,0.5 74.86,0.36 75.05,0.22 75.28,0.14 75.5,0.07 75.74,0.07 q 0.24,0 0.46,0.08 0.23,0.08 0.42,0.22 0.19,0.15 0.32,0.35 0.13,0.2 0.19,0.43 0.06,0.23 0.05,0.47 -0.02,0.23 -0.11,0.45 -0.09,0.22 -0.24,0.4 -0.16,0.19 -0.36,0.31 -0.21,0.12 -0.21,0.12 0,0 -2.45,0.27 -2.44,0.28 -3.54,0.27 -1.09,0 -1.63,-0.01 -0.54,0 -1.11,0 -0.57,0 -1.19,0 -0.61,0 -1.22,0.01 -0.62,0 -1.23,0 -0.62,0 -1.26,0.01 -0.65,0 -1.27,-0.01 -0.61,0 -1.2,0 Q 59.56,3.45 58.5,3.43 57.43,3.41 56.54,3.4 55.65,3.39 55.11,3.35 54.57,3.32 53.89,3.22 53.22,3.12 52.36,3.07 51.5,3.02 50.91,3 50.31,2.98 49.59,2.97 48.86,2.95 47.92,2.98 46.98,3.01 46.26,3 45.53,2.99 44.86,2.96 44.18,2.93 43.55,2.89 42.92,2.85 42.38,2.8 41.83,2.74 40.94,2.53 40.05,2.32 39.53,2.17 39.01,2.01 38.44,1.91 37.87,1.81 37,1.73 36.13,1.65 34.84,1.61 33.55,1.58 31.67,1.55 29.78,1.52 26.98,1.49 24.17,1.45 20.51,1.38 16.84,1.31 10.4,1.2 3.96,1.09 2.88,1.07 1.81,1.05 0.86,0.97 -0.07,0.89 -0.18,0.87 -0.29,0.85 -0.38,0.8 -0.48,0.75 -0.57,0.68 -0.65,0.61 -0.71,0.53 -0.78,0.44 -0.82,0.34 -0.86,0.24 -0.88,0.13 -0.9,0.02 -0.89,-0.07 q 0.01,-0.11 0.05,-0.22 0.03,-0.1 0.09,-0.19 0.06,-0.09 0.14,-0.16 0.08,-0.08 0.17,-0.13 0.1,-0.06 0.2,-0.09 0.11,-0.03 0.22,-0.03 0.09,0 0.09,0 z",
	),
	None,
];

const ZERO_TRANS: AffinePaths = [
	Some([0.46598358, 0., 0., 0.46598358, 0.53861564, -0.51258207]),
	Some([0.46598358, 0., 0., 0.46598358, 9.883698, 17.555133]),
	None,
];

const ZERO_PATHS: StringPaths = [
	Some(
		"m 28.35,3.41 c 3.95,2.89 7.6,10.87 9.35,18.56 1.75,7.68 2.08,19.29 1.16,27.55 -0.92,8.27 -3.26,17.07 -6.68,22.05 -3.42,4.99 -9.6,8.17 -13.85,7.85 C 14.08,79.11 9.83,75.35 6.68,69.68 3.54,64.01 0.06,53.98 -0.54,45.42 -1.14,36.86 0.69,25.43 3.06,18.31 5.43,11.18 8.93,4.37 13.7,2.66 18.47,0.96 28.38,6.44 31.69,8.1 35,9.77 33.94,12.11 33.58,12.66 M 26.27,1.6 c 3.99,1.83 8.38,9.83 10.8,16.97 2.42,7.15 4.35,17.17 3.71,25.89 -0.63,8.73 -4.14,20.37 -7.51,26.48 -3.37,6.11 -8.44,9.85 -12.7,10.18 C 16.3,81.44 11.19,78.44 7.68,72.88 4.18,67.32 0.27,56.38 -0.46,47.73 -1.18,39.07 1.15,28.38 3.33,20.95 5.5,13.51 9,6.08 12.59,3.12 16.18,0.17 22.86,3.05 24.87,3.21 c 2.01,0.17 -0.39,0.46 -0.2,0.88",
	),
	Some(
		"m 0.91,0.85 q 0,0 -0.85,0.8 -0.84,0.79 -1.78,0.54 -0.94,-0.24 -0.64,-0.78 0.3,-0.54 1.07,-0.83 0.76,-0.29 1.12,0.21 0.35,0.5 0.7,0.9 0.35,0.4 0.01,-1.38 -0.35,-1.76 -0.15,-1.82 0.21,-0.06 0.42,-0.08 0.21,-0.01 0.42,0.03 0.2,0.04 0.39,0.13 0.2,0.09 0.36,0.22 0.17,0.13 0.3,0.3 0.13,0.17 0.21,0.36 0.09,0.19 0.12,0.4 0.04,0.2 0.02,0.41 Q 2.62,0.47 2.56,0.67 2.49,0.87 2.38,1.05 2.27,1.23 2.12,1.38 1.97,1.53 1.79,1.64 1.61,1.75 0.4,1.16 -0.79,0.58 -0.81,0.29 q -0.03,-0.28 0.04,-0.54 0.06,-0.28 0.21,-0.52 0.16,-0.24 0.38,-0.42 0.21,-0.18 0.47,-0.28 0.27,-0.1 0.55,-0.11 0.28,-0.01 0.56,0.07 0.27,0.09 0.5,0.25 0.23,0.16 0.4,0.39 0.16,0.23 0.25,0.5 Q 2.63,-0.1 2.63,0.18 2.62,0.46 2.53,0.73 2.43,1 2.25,1.22 2.08,1.44 1.84,1.59 1.6,1.75 1.33,1.82 1.05,1.89 0.77,1.87 0.49,1.85 0.22,1.74 -0.03,1.62 -0.24,1.44 -0.45,1.25 -0.59,1 -0.73,0.76 -0.79,0.48 -0.84,0.2 -0.81,-0.07 q 0.04,-0.28 0.16,-0.54 0.13,-0.25 0.33,-0.45 0.2,-0.21 0.44,-0.33 0.25,-0.13 0.53,-0.17 0.29,-0.04 0.56,0.01 0.28,0.05 0.53,0.19 0.25,0.14 0.44,0.35 0.19,0.21 -0.9,-0.12 -1.09,-0.32 -0.89,-0.38 0.21,-0.06 0.42,-0.08 0.21,-0.01 0.41,0.03 0.21,0.04 0.4,0.13 0.2,0.09 0.36,0.22 0.17,0.13 0.3,0.3 0.13,0.17 0.21,0.36 0.09,0.19 0.12,0.4 0.04,0.2 0.02,0.41 Q 2.62,0.47 2.56,0.67 2.49,0.87 2.38,1.05 2.27,1.23 2.12,1.38 1.97,1.53 1.79,1.64 1.61,1.75 1.85,3.23 2.1,4.71 1.54,4.91 0.99,5.1 0.37,5.05 -0.25,5 -0.84,4.68 -1.42,4.36 -1.83,3.82 -2.24,3.27 -2.39,2.63 -2.55,1.98 -2.5,1.39 q 0.05,-0.59 0.22,-1.1 0.17,-0.5 0.58,-1.05 0.4,-0.55 1.02,-0.7 0.62,-0.16 1.47,0.23 0.86,0.38 0.96,1.24 Q 1.85,0.88 1.6,1.56 1.35,2.24 0.94,2.69 0.52,3.14 -0.1,3.23 -0.73,3.32 -1.28,3.15 -1.83,2.98 -2.37,2.32 -2.91,1.67 -3.09,0.75 q -0.17,-0.9 0.1,-1.5 0.27,-0.6 1.28,-0.96 1,-0.35 1.6,0.03 0.58,0.39 0.85,1.28 Q 1.01,0.48 0.77,1.14 0.54,1.79 0.08,2.43 -0.36,3.07 -1.04,3.48 -1.72,3.9 -2.53,3.47 -3.35,3.04 -3.26,2.43 q 0.1,-0.62 0.49,-1.06 0.38,-0.43 1.12,-1.33 0.74,-0.89 0.85,-0.99 0.12,-0.1 0.26,-0.16 0.13,-0.07 0.28,-0.1 0.15,-0.03 0.29,-0.03 0.15,0 0.3,0.04 0.14,0.04 0.27,0.12 0.14,0.07 0.25,0.18 0.11,0.1 0.19,0.23 0.08,0.12 0.13,0.27 0.05,0.14 0.07,0.29 Q 1.25,0.03 1.23,0.18 1.21,0.33 1.15,0.47 1.09,0.61 1,0.73 Z",
	),
	None,
];

const ONE_TRANS: AffinePaths = [
	Some([0.47345101, 0., 0., 0.47345101, 0.49002179, 9.8392589]),
	None,
	None,
];

const ONE_PATH: StringPaths = [
	Some(
		"m -0.77,-0.71 q 0,0 0.78,-0.77 0.79,-0.77 1.5,-1.46 0.71,-0.68 1.44,-1.36 0.74,-0.67 1.5,-1.34 0.75,-0.67 1.47,-1.31 0.72,-0.63 1.33,-1.21 0.61,-0.58 1.09,-1.11 0.49,-0.53 0.88,-1 0.4,-0.48 0.74,-0.93 0.34,-0.46 0.72,-0.93 0.37,-0.46 0.89,-1.05 0.52,-0.59 1.33,-1.56 0.81,-0.97 1.24,-1.47 0.43,-0.51 0.89,-1.1 0.46,-0.6 0.77,-1.15 0.32,-0.54 0.55,-1.06 0.23,-0.51 0.34,-0.66 0.11,-0.15 0.25,-0.26 0.14,-0.12 0.31,-0.2 0.16,-0.07 0.34,-0.11 0.18,-0.04 0.36,-0.03 0.18,0 0.36,0.06 0.18,0.05 0.33,0.14 0.16,0.09 0.29,0.21 0.14,0.13 0.23,0.28 0.1,0.16 0.16,0.33 0.06,0.17 0.07,0.35 0.02,0.19 -0.01,0.37 -0.03,0.18 -0.1,0.34 -0.07,0.17 -0.09,-0.61 -0.01,-0.77 0.3,0.3 0.31,1.07 0.38,1.89 0.08,0.82 0.14,2.31 0.06,1.48 0.11,2.93 0.05,1.44 0.07,2.84 0.03,1.41 0.05,2.78 0.02,1.37 0.03,2.72 0,1.36 0,2.7 -0.01,1.33 0,2.65 0,1.31 0.02,2.62 0.03,1.3 0.06,2.52 0.04,1.22 0.06,2.31 0.03,1.09 0.05,2.26 0.03,1.17 0.09,1.88 0.07,0.71 0.1,1.55 0.04,0.84 0.08,1.55 0.04,0.71 0.06,1.42 0.01,0.71 0.03,1.44 0.02,0.73 0.02,1.51 0.01,0.77 0.02,1.57 0,0.8 0.02,1.53 0.01,0.74 0.02,1.46 0.01,0.72 0.02,1.45 0.01,0.73 -0.02,1.67 -0.03,0.93 -0.01,1.71 0.02,0.79 0.09,1.98 0.08,1.2 0.1,1.79 0.02,0.58 -0.16,3.01 -0.19,2.42 -0.3,3.71 -0.12,1.28 -0.18,2.24 -0.05,0.95 -0.01,2.02 0.04,1.08 0.07,1.89 0.04,0.81 0.08,1.62 0.04,0.8 0.09,1.45 0.06,0.66 0.28,1.15 0.22,0.48 0.3,1.14 0.09,0.67 0.23,2.66 0.14,1.99 0.1,2.25 -0.04,0.25 -0.16,0.48 -0.12,0.23 -0.3,0.41 -0.19,0.17 -0.42,0.28 -0.23,0.11 -0.49,0.14 -0.26,0.03 -0.51,-0.02 -0.25,-0.06 -0.47,-0.19 -0.22,-0.13 -0.39,-0.32 -0.17,-0.2 -0.27,-0.44 -0.09,-0.24 -0.11,-0.49 -0.01,-0.26 0.05,-0.51 0.07,-0.25 0.21,-0.46 0.15,-0.22 0.35,-0.37 0.2,-0.16 0.45,-0.24 0.24,-0.09 0.5,-0.09 0.26,0 0.5,0.08 0.25,0.08 0.45,0.23 0.21,0.16 0.35,0.37 0.15,0.21 0.22,0.46 0.07,0.25 0.06,0.51 -0.01,0.25 -0.11,0.49 -0.09,0.24 -0.26,0.44 -0.16,0.2 -0.38,0.33 -0.22,0.14 -0.47,0.19 -0.25,0.06 -0.51,0.03 -0.26,-0.02 -0.49,-0.13 -0.24,-0.1 -0.42,-0.28 -0.19,-0.18 -0.31,-0.4 -0.13,-0.23 -0.17,-0.48 -0.04,-0.26 -0.04,-0.26 0,0 -0.11,-1.8 -0.1,-1.8 -0.03,-2.42 0.06,-0.61 -0.15,-1.32 -0.2,-0.71 -0.18,-1.4 0.02,-0.69 0.08,-1.54 0.06,-0.85 0.15,-1.65 0.09,-0.8 0.15,-1.33 0.06,-0.53 0.12,-1.07 0.06,-0.54 0.08,-1.5 0.03,-0.96 0.04,-2.25 0,-1.29 0.04,-3.65 0.04,-2.37 0.06,-2.95 0.02,-0.58 0.02,-1.24 0.01,-0.66 0.02,-1.19 0.01,-0.54 0,-1.34 -0.01,-0.8 -0.04,-1.73 -0.03,-0.94 -0.02,-1.67 0.01,-0.73 0.02,-1.45 0.01,-0.72 0.03,-1.46 0.01,-0.74 0.02,-1.53 0.01,-0.8 0.02,-1.58 0.01,-0.79 0.04,-1.53 0.03,-0.74 0.07,-1.42 0.05,-0.69 0.08,-1.4 0.04,-0.71 0.06,-1.54 0.03,-0.84 0.07,-1.54 0.04,-0.71 0.01,-1.88 Q 19.06,10.39 19.02,9.3 18.98,8.22 18.92,7 18.87,5.77 18.82,4.46 18.77,3.15 18.73,1.83 18.69,0.51 18.65,-0.81 q -0.04,-1.32 -0.11,-2.66 -0.07,-1.34 -0.18,-2.69 -0.1,-1.36 -0.24,-2.72 -0.14,-1.37 -0.34,-2.77 -0.2,-1.4 -0.45,-2.83 -0.26,-1.42 -0.43,-2.64 -0.18,-1.22 -0.25,-2.07 -0.07,-0.84 0.04,-0.99 0.11,-0.15 0.25,-0.26 0.14,-0.12 0.31,-0.2 0.16,-0.07 0.34,-0.11 0.18,-0.04 0.36,-0.03 0.18,0 0.36,0.06 0.18,0.05 0.33,0.14 0.16,0.09 0.29,0.21 0.14,0.13 0.23,0.28 0.1,0.16 0.16,0.33 0.06,0.17 0.07,0.35 0.02,0.18 -0.01,0.37 -0.03,0.18 -0.1,0.34 -0.07,0.17 -0.21,0.37 -0.15,0.19 -0.45,0.66 -0.29,0.46 -0.72,0.97 -0.42,0.5 -0.97,1.05 -0.54,0.55 -0.98,1.03 -0.45,0.49 -1.3,1.42 -0.85,0.94 -1.36,1.52 -0.52,0.59 -0.92,1.01 -0.41,0.42 -0.83,0.87 -0.42,0.45 -0.89,0.9 -0.47,0.45 -1.03,0.97 -0.56,0.52 -1.21,1.07 -0.64,0.55 -1.35,1.18 -0.7,0.62 -1.43,1.31 Q 4.9,-3.68 4.21,-3 3.51,-2.33 2.85,-1.65 2.19,-0.97 1.48,-0.12 0.77,0.71 0.67,0.79 0.57,0.87 0.46,0.93 0.35,0.98 0.22,1.01 0.1,1.04 -0.02,1.04 -0.14,1.03 -0.27,1 -0.39,0.97 -0.5,0.91 -0.61,0.85 -0.7,0.76 -0.8,0.67 -0.87,0.57 -0.94,0.46 -0.98,0.34 -1.02,0.22 -1.03,0.1 q -0.01,-0.12 0,-0.24 0.02,-0.13 0.07,-0.25 0.05,-0.11 0.12,-0.22 z",
	),
	None,
	None,
];

pub(crate) const ASSET_DICT: [(AffinePaths, StringPaths, (f32, f32)); 3] = [
	(ZERO_TRANS, ZERO_PATHS, (2.5, -5.)),
	(ONE_TRANS, ONE_PATH, (3., -1.)),
	(BOT_TRANS, BOT_PATHS, (-5., -5.)),
];

#[inline]
pub fn svg_matrix_to_trans(el: &[f32; 6], extra: (f32, f32)) -> Transform {
	// Extract translation
	let translation = Vec3::new(el[4] + extra.0, el[5] + extra.1, 5.0);

	// Extract scale
	let scale_x = (el[0] * el[0] + el[1] * el[1]).sqrt();
	let scale_y = (el[2] * el[2] + el[3] * el[3]).sqrt();

	// Extract rotation (in radians)
	// atan2 handles full 360-degree range
	let rotation = Quat::IDENTITY;
	let scale = Vec3::new(scale_x, scale_y, 1.0);

	Transform {
		translation,
		rotation,
		scale,
	}
}

pub fn generate_bundle_from_asset(
	trans: &[Option<[f32; 6]>],
	paths: &[Option<&str>],
	extra: (f32, f32),
) -> Vec<(Shape, Transform)> {
	let size = Vec2::splat(50.);
	trans
		.iter()
		.copied()
		.zip(paths.iter().copied())
		.filter_map(|(a, b)| {
			if let (Some(x), Some(y)) = (a, b) {
				Some((x, y))
			} else {
				None
			}
		})
		.map(|(trans, path)| {
			let svg = shapes::SvgPathShape {
				svg_path_string: path.to_owned(),
				svg_doc_size_in_px: size,
			};
			let trans = svg_matrix_to_trans(&trans, extra);
			(
				ShapeBuilder::with(&svg)
					.stroke((Color::WHITE, LINE_STROKE))
					.build(),
				Transform {
					translation: trans.translation * Vec3::new(1., -1., 1.),
					..trans
				},
			)
		})
		.collect_vec()
}
